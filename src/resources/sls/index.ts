import { ICredentials } from '@serverless-devs/component-interface';
import Sls20201230, { InitSlsRequest } from '@serverless-cd/srm-aliyun-sls20201230';
import { Config } from '@alicloud/openapi-client';
import { IRegion } from '../../interface';
import { PROJECT, LOG_STORE } from '../../default/resources';
import logger from '../../logger';
import getUuid from 'uuid-by-string';
import { isAppCenter } from '../../utils/index';

export default class Sls {
  static generateProjectName = (region: IRegion, accountID: string): string => {
    let project = PROJECT || `serverless-${region}-${getUuid(accountID)}`;

    if (project.length > 63) {
      project = project.substring(0, 63);
    }

    return project;
  };
  static generateLogstoreName = (): string => {
    return LOG_STORE;
  };

  readonly client: Sls20201230;
  private accountID: string;

  constructor(private region: IRegion, credentials: ICredentials) {
    const config = new Config({
      accessKeyId: credentials.AccessKeyID,
      accessKeySecret: credentials.AccessKeySecret,
      securityToken: credentials.SecurityToken,
      endpoint: `${region}.log.aliyuncs.com`,
      userAgent: 'serverless-devs',
      regionId: region,
      readTimeout: 60000,
      connectTimeout: 5000,
    });
    this.client = new Sls20201230(config);
    this.accountID = credentials.AccountID;
  }

  async deploy(): Promise<{ project: string; logstore: string }> {
    const project = Sls.generateProjectName(this.region, this.accountID);
    const logstore = Sls.generateLogstoreName();

    const request = new InitSlsRequest({
      project,
      logstore,
      description: 'Generated by Aliyun fc3.x component',
      accountID: this.accountID,
      region: this.region,
    });

    logger.debug(`init sls: ${JSON.stringify(request)}`);
    if (isAppCenter()) {
      logger.info(
        `creating sls region: ${this.region}; project: ${project}; logstore: ${logstore}`,
      );
    } else {
      logger.spin(
        'creating',
        'sls',
        `region: ${this.region}; project: ${project}; logstore: ${logstore}`,
      );
    }
    await this.client.initSls(request);
    if (isAppCenter()) {
      logger.info(`created sls region: ${this.region}; project: ${project}; logstore: ${logstore}`);
    } else {
      logger.spin(
        'created',
        'sls',
        `region: ${this.region}; project: ${project}; logstore: ${logstore}`,
      );
    }
    return { project, logstore };
  }
}
